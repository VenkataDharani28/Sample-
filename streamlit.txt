What is Streamlit?
Streamlit is an open-source Python library that makes it easy to create and share custom web apps for machine learning and data science. By using Streamlit you can quickly build and deploy powerful data applications. For more information about the open-source library, see the Streamlit Library documentation.
image

Deploy Streamlit apps in Snowflake:
Streamlit in Snowflake helps developers securely build, deploy, and share Streamlit apps on Snowflake’s data cloud. Using Streamlit in Snowflake, you can build applications that process and use data in Snowflake without moving data or application code to an external system
image

Key features of Streamlit in Snowflake:
Snowflake manages the underlying compute and storage for Streamlit apps.
Streamlit apps are Snowflake objects and use Role-based Access Control (RBAC) to manage access to Streamlit apps.
Streamlit apps run on Snowflake warehouses and use internal stages to store files and data.
Streamlit in Snowflake works seamlessly with Snowpark, user-defined functions (UDFs), stored procedures, and Snowflake Native App Framework.
When working with Snowsight, you use the side-by-side editor and app preview screen to quickly add, adjust, or remove components. In this way, you can modify your code and see changes in the app right away.

****Permissions and Grants for Streamlit in Snowflake****

1.** Basic Permissions for Streamlit Apps**
USAGE is granted on the database and schema where the Streamlit app is located.
CREATE STREAMLIT and CREATE STAGE are granted on the schema that contains the Streamlit app.
CREATE STREAMLIT: Allows users to create Streamlit applications in the schema.
CREATE STAGE: Required because Streamlit stores its files within a Snowflake stage.

**2. Permissions for Enablement Zones (EZs)**
a.Grant ownership on future stages in a schema:
###sql###
grant ownership on future stages in schema <db>.<schema> to role SNF_MW_<COSA>_P_EZ_#_<ENV>;
#########
This ensures that when a new stage (storage location) is created in this schema, the specified role automatically owns it.


b.Streamlit Ownership Issue:
Snowflake does not support granting ownership on future Streamlit apps:
###sql###
grant ownership on future streamlits in schema <db>.<schema> to role SNF_MW_<COSA>_P_EZ_#_<ENV>;
#########
This returns an unsupported feature error (0A000).
Instead, Snowflake automatically assigns ownership to the role that created the Streamlit app.

**3. Implementation in Enablement Zones (EZs)**

New EZs:

a.The role_mgd_sp() stored procedure can be updated to automatically grant:
###sql###
CREATE STAGE, CREATE STREAMLIT, and GRANT OWNERSHIP ON FUTURE STAGES
#########
This simplifies the setup process for new EZs.

Existing EZs:

b.For existing EZs, these grants must be applied manually:
###sql###
grant create streamlit, create stage on schema <EZ DB>.<EZ Schema> to role SNF_MW_<COSA>_P_EZ_#_<ENV>;
grant ownership on future stages in schema <db>.<schema> to role SNF_MW_<COSA>_P_EZ_#_<ENV>;
#########
The stored procedure role_mgd_sp() can be used to automate the application of these grants without affecting existing permissions.

**4. View-Only Access to Streamlit Apps**
Users must be explicitly granted USAGE on each Streamlit app to view it.
###sql###
grant usage on streamlit dsbxez3.ez3.ZAJJXIQJST1XQP1Y to role SNF_MW_SBX_R_EZ_3_DEV;
#########

Future Grants Limitation:
Unlike other object types, future grants do not work for Streamlit apps.
###sql###
grant usage on future streamlits in schema dsbxez3.ez3 to role SNF_MW_SBX_R_EZ_3_DEV;
########
This is an unsupported feature in Snowflake.


**5. Automated Granting via DBA Job**
A Python job will be owned by the DBAs to periodically grant read-only roles usage on Streamlit objects.
This avoids relying on users to manually request access.

**6. Sharing Streamlit Apps in Enablement Zones**
Issue with Snowsight Sharing:
Since Snowflake automatically assigns ownership to the creator’s role, EZ users cannot share their Streamlit apps via Snowsight.
SQL commands to grant access fail due to managed access schemas:
####sql####
grant usage on streamlit STREAMLIT_DDL to role SNF_MW_SBX_R_EZ_3_DEV;
#########
Error: "Not authorized in a managed access schema."
Only the schema owner or a role with MANAGE GRANTS privilege can grant access.


**7. Why is CREATE STAGE Required?**
When creating a Streamlit app in Snowsight, a Snowflake stage is automatically created to store its files.
Snowflake recommends each Streamlit app have its own stage.
Workarounds for multiple apps:
a.Users can manually create the Streamlit app inside an existing EZ stage.
b.Use subfolders within a stage to store multiple Streamlit apps.


**8. Streamlit and Secondary Roles**
Streamlit apps run under the primary role that created them.
Secondary roles do not work in Streamlit.
Attempts to enable them using Snowpark APIs fail due to insufficient privileges:
###sql##
session.use_secondary_roles("all")
#######
Error: SQL access control error: Insufficient privileges to operate on role 'ALL'.

################################################################################################

dev implementation

**1. Basic Permissions for Developing with Streamlit**
a.To develop models using Streamlit, users need access to:
Database & Schema: The DS must be granted USAGE on the database and schema that contain the Streamlit app.
Schema-Level Privileges: The DS must have CREATE STREAMLIT and CREATE STAGE privileges.
####sql###
grant create streamlit, create stage on schema <EZ DB>.<EZ Schema> to role SNF_MW_<COSA>_P_EZ_#_<ENV>;
#########
Why is CREATE STAGE required?

Streamlit stores its application files inside a Snowflake stage.

Without CREATE STAGE, Data Scientists cannot deploy Streamlit applications within EZs.



**2. Setting Up Streamlit in EZs for Model Development**
New EZs

The role_mgd_sp() stored procedure can be updated to include:
###sql###
CREATE STREAMLIT, CREATE STAGE, and GRANT OWNERSHIP ON FUTURE STAGES.
########
This allows DS to automatically gain access when a new EZ is created.

Existing EZs
For existing Enablement Zones, DS need explicit manual grants:
###sql###
grant create streamlit, create stage on schema <EZ DB>.<EZ Schema> to role SNF_MW_<COSA>_P_EZ_#_<ENV>;
grant ownership on future stages in schema <db>.<schema> to role SNF_MW_<COSA>_P_EZ_#_<ENV>;
#########
These grants allow Data Scientists to create and store Streamlit apps in the EZ.


**3. Streamlit Development Workflow in EZs**
Model Development Phase
Data Scientists use Streamlit for:
a.Exploratory Data Analysis (EDA): Interactive charts and visualizations.
b.Feature Engineering: Visualizing feature distributions and importance.
c.Model Performance Evaluation: Dynamic dashboards for metrics comparison.

Snowflake's Streamlit Restrictions Affect Development:
Future grants for Streamlit apps are NOT supported.

a.Unlike other Snowflake objects, Streamlit requires manual access grants per app.
Example:
###sql###
grant usage on streamlit dsbxez3.ez3.ZAJJXIQJST1XQP1Y to role SNF_MW_SBX_R_EZ_3_DEV;
########
Cannot use:
####sql###
grant usage on future streamlits in schema dsbxez3.ez3 to role SNF_MW_SBX_R_EZ_3_DEV;
#########
This returns an error: Unsupported feature 'STREAMLIT'.


************************Collaboration and Sharing***************************************
Data Scientists cannot directly share their Streamlit apps in EZs via Snowsight.
a.Streamlit automatically assigns ownership to the role that created the app.
b.If the schema is a managed access schema, DS cannot manually grant access.
###sql###
grant usage on streamlit STREAMLIT_DDL to role SNF_MW_SBX_R_EZ_3_DEV;
########
Error: "Not authorized in a managed access schema."
c.Only the schema owner or a role with MANAGE GRANTS privilege can modify access.


**4. Workarounds for Streamlit App Development in EZs**
Issue with CREATE STAGE and multiple Streamlit apps:
Snowflake requires each Streamlit app to be stored in its own stage.
Possible Workarounds:
a.Manually create the Streamlit app inside an existing EZ stage.
b.Store multiple Streamlit apps in subfolders within the same stage.


**5. Secondary Roles & Snowpark API in Model Development**
1.Streamlit does NOT support secondary roles for permissions.
a.Streamlit always runs under the primary role that created the app.
b.Attempts to use Snowpark's API for secondary roles fail:
###sql###
session.use_secondary_roles("all")
#########
Error: "Insufficient privileges to operate on role 'ALL'."
Workaround: DS must ensure their primary role has the necessary permissions before using Streamlit.










