
Python logo

3.13.2
Quick search

English
Theme
Auto
Table of Contents
configparser — Configuration file parser
Quick Start
Supported Datatypes
Fallback Values
Supported INI File Structure
Unnamed Sections
Interpolation of values
Mapping Protocol Access
Customizing Parser Behaviour
Legacy API Examples
ConfigParser Objects
RawConfigParser Objects
Exceptions
Previous topic
csv — CSV File Reading and Writing

Next topic
tomllib — Parse TOML files

This Page
Report a Bug
Show Source
configparser — Configuration file parser
Source code: Lib/configparser.py

This module provides the ConfigParser class which implements a basic configuration language which provides a structure similar to what’s found in Microsoft Windows INI files. You can use this to write Python programs which can be customized by end users easily.

Note This library does not interpret or write the value-type prefixes used in the Windows Registry extended version of INI syntax.
See also
Module tomllib
TOML is a well-specified format for application configuration files. It is specifically designed to be an improved version of INI.

Module shlex
Support for creating Unix shell-like mini-languages which can also be used for application configuration files.

Module json
The json module implements a subset of JavaScript syntax which is sometimes used for configuration, but does not support comments.

Quick Start
Let’s take a very basic configuration file that looks like this:

[DEFAULT]
ServerAliveInterval = 45
Compression = yes
CompressionLevel = 9
ForwardX11 = yes

[forge.example]
User = hg

[topsecret.server.example]
Port = 50022
ForwardX11 = no
The structure of INI files is described in the following section. Essentially, the file consists of sections, each of which contains keys with values. configparser classes can read and write such files. Let’s start by creating the above configuration file programmatically.

>>>
import configparser
config = configparser.ConfigParser()
config['DEFAULT'] = {'ServerAliveInterval': '45',
                     'Compression': 'yes',
                     'CompressionLevel': '9'}
config['forge.example'] = {}
config['forge.example']['User'] = 'hg'
config['topsecret.server.example'] = {}
topsecret = config['topsecret.server.example']
topsecret['Port'] = '50022'     # mutates the parser
topsecret['ForwardX11'] = 'no'  # same here
config['DEFAULT']['ForwardX11'] = 'yes'
with open('example.ini', 'w') as configfile:
  config.write(configfile)

As you can see, we can treat a config parser much like a dictionary. There are differences, outlined later, but the behavior is very close to what you would expect from a dictionary.

Now that we have created and saved a configuration file, let’s read it back and explore the data it holds.

>>>
config = configparser.ConfigParser()
config.sections()
[]
config.read('example.ini')
['example.ini']
config.sections()
['forge.example', 'topsecret.server.example']
'forge.example' in config
True
'python.org' in config
False
config['forge.example']['User']
'hg'
config['DEFAULT']['Compression']
'yes'
topsecret = config['topsecret.server.example']
topsecret['ForwardX11']
'no'
topsecret['Port']
'50022'
for key in config['forge.example']:
    print(key)
user
compressionlevel
serveraliveinterval
compression
forwardx11
config['forge.example']['ForwardX11']
'yes'
As we can see above, the API is pretty straightforward. The only bit of magic involves the DEFAULT section which provides default values for all other sections [1]. Note also that keys in sections are case-insensitive and stored in lowercase [1].

It is possible to read several configurations into a single ConfigParser, where the most recently added configuration has the highest priority. Any conflicting keys are taken from the more recent configuration while the previously existing keys are retained. The example below reads in an override.ini file, which will override any conflicting keys from the example.ini file.

[DEFAULT]
ServerAliveInterval = -1
>>>
config_override = configparser.ConfigParser()
config_override['DEFAULT'] = {'ServerAliveInterval': '-1'}
with open('override.ini', 'w') as configfile:
    config_override.write(configfile)

config_override = configparser.ConfigParser()
config_override.read(['example.ini', 'override.ini'])
['example.ini', 'override.ini']
print(config_override.get('DEFAULT', 'ServerAliveInterval'))
-1
This behaviour is equivalent to a ConfigParser.read() call with several files passed to the filenames parameter.

Supported Datatypes
Config parsers do not guess datatypes of values in configuration files, always storing them internally as strings. This means that if you need other datatypes, you should convert on your own:

>>>
int(topsecret['Port'])
50022
float(topsecret['CompressionLevel'])
9.0
Since this task is so common, config parsers provide a range of handy getter methods to handle integers, floats and booleans. The last one is the most interesting because simply passing the value to bool() would do no good since bool('False') is still True. This is why config parsers also provide getboolean(). This method is case-insensitive and recognizes Boolean values from 'yes'/'no', 'on'/'off', 'true'/'false' and '1'/'0' [1]. For example:

>>>
topsecret.getboolean('ForwardX11')
False
config['forge.example'].getboolean('ForwardX11')
True
config.getboolean('forge.example', 'Compression')
True
Apart from getboolean(), config parsers also provide equivalent getint() and getfloat() methods. You can register your own converters and customize the provided ones. [1]

Fallback Values
As with a dictionary, you can use a section’s get() method to provide fallback values:

>>>
topsecret.get('Port')
'50022'
topsecret.get('CompressionLevel')
'9'
topsecret.get('Cipher')
topsecret.get('Cipher', '3des-cbc')
'3des-cbc'
Please note that default values have precedence over fallback values. For instance, in our example the 'CompressionLevel' key was specified only in the 'DEFAULT' section. If we try to get it from the section 'topsecret.server.example', we will always get the default, even if we specify a fallback:

>>>
topsecret.get('CompressionLevel', '3')
'9'
One more thing to be aware of is that the parser-level get() method provides a custom, more complex interface, maintained for backwards compatibility. When using this method, a fallback value can be provided via the fallback keyword-only argument:

>>>
config.get('forge.example', 'monster',
           fallback='No such things as monsters')
'No such things as monsters'
The same fallback argument can be used with the getint(), getfloat() and getboolean() methods, for example:

>>>
'BatchMode' in topsecret
False
topsecret.getboolean('BatchMode', fallback=True)
True
config['DEFAULT']['BatchMode'] = 'no'
topsecret.getboolean('BatchMode', fallback=True)
False
Supported INI File Structure
A configuration file consists of sections, each led by a [section] header, followed by key/value entries separated by a specific string (= or : by default [1]). By default, section names are case sensitive but keys are not [1]. Leading and trailing whitespace is removed from keys and values. Values can be omitted if the parser is configured to allow it [1], in which case the key/value delimiter may also be left out. Values can also span multiple lines, as long as they are indented deeper than the first line of the value. Depending on the parser’s mode, blank lines may be treated as parts of multiline values or ignored.

By default, a valid section name can be any string that does not contain ‘\n’. To change this, see ConfigParser.SECTCRE.

The first section name may be omitted if the parser is configured to allow an unnamed top level section with allow_unnamed_section=True. In this case, the keys/values may be retrieved by UNNAMED_SECTION as in config[UNNAMED_SECTION].

Configuration files may include comments, prefixed by specific characters (# and ; by default [1]). Comments may appear on their own on an otherwise empty line, possibly indented. [1]

For example:

[Simple Values]
key=value
spaces in keys=allowed
spaces in values=allowed as well
spaces around the delimiter = obviously
you can also use : to delimit keys from values

[All Values Are Strings]
values like this: 1000000
or this: 3.14159265359
are they treated as numbers? : no
integers, floats and booleans are held as: strings
can use the API to get converted values directly: true

[Multiline Values]
chorus: I'm a lumberjack, and I'm okay
    I sleep all night and I work all day

[No Values]
key_without_value
empty string value here =

[You can use comments]
# like this
; or this

# By default only in an empty line.
# Inline comments can be harmful because they prevent users
# from using the delimiting characters as parts of values.
# That being said, this can be customized.

    [Sections Can Be Indented]
        can_values_be_as_well = True
        does_that_mean_anything_special = False
        purpose = formatting for readability
        multiline_values = are
            handled just fine as
            long as they are indented
            deeper than the first line
            of a value
        # Did I mention we can indent comments, too?
Unnamed Sections
The name of the first section (or unique) may be omitted and values retrieved by the UNNAMED_SECTION attribute.

>>>
config = """
option = value

[  Section 2  ]
another = val
"""
unnamed = configparser.ConfigParser(allow_unnamed_section=True)
unnamed.read_string(config)
unnamed.get(configparser.UNNAMED_SECTION, 'option')
'value'
Interpolation of values
On top of the core functionality, ConfigParser supports interpolation. This means values can be preprocessed before returning them from get() calls.

class configparser.BasicInterpolation
The default implementation used by ConfigParser. It enables values to contain format strings which refer to other values in the same section, or values in the special default section [1]. Additional default values can be provided on initialization.

For example:

[Paths]
home_dir: /Users
my_dir: %(home_dir)s/lumberjack
my_pictures: %(my_dir)s/Pictures

[Escape]
# use a %% to escape the % sign (% is the only character that needs to be escaped):
gain: 80%%
In the example above, ConfigParser with interpolation set to BasicInterpolation() would resolve %(home_dir)s to the value of home_dir (/Users in this case). %(my_dir)s in effect would resolve to /Users/lumberjack. All interpolations are done on demand so keys used in the chain of references do not have to be specified in any specific order in the configuration file.

With interpolation set to None, the parser would simply return %(my_dir)s/Pictures as the value of my_pictures and %(home_dir)s/lumberjack as the value of my_dir.

class configparser.ExtendedInterpolation
An alternative handler for interpolation which implements a more advanced syntax, used for instance in zc.buildout. Extended interpolation is using ${section:option} to denote a value from a foreign section. Interpolation can span multiple levels. For convenience, if the section: part is omitted, interpolation defaults to the current section (and possibly the default values from the special section).

For example, the configuration specified above with basic interpolation, would look like this with extended interpolation:

[Paths]
home_dir: /Users
my_dir: ${home_dir}/lumberjack
my_pictures: ${my_dir}/Pictures

[Escape]
# use a $$ to escape the $ sign ($ is the only character that needs to be escaped):
cost: $$80
Values from other sections can be fetched as well:

[Common]
home_dir: /Users
library_dir: /Library
system_dir: /System
macports_dir: /opt/local

[Frameworks]
Python: 3.2
path: ${Common:system_dir}/Library/Frameworks/

[Arthur]
nickname: Two Sheds
last_name: Jackson
my_dir: ${Common:home_dir}/twosheds
my_pictures: ${my_dir}/Pictures
python_dir: ${Frameworks:path}/Python/Versions/${Frameworks:Python}
Mapping Protocol Access
Added in version 3.2.

Mapping protocol access is a generic name for functionality that enables using custom objects as if they were dictionaries. In case of configparser, the mapping interface implementation is using the parser['section']['option'] notation.

parser['section'] in particular returns a proxy for the section’s data in the parser. This means that the values are not copied but they are taken from the original parser on demand. What’s even more important is that when values are changed on a section proxy, they are actually mutated in the original parser.

configparser objects behave as close to actual dictionaries as possible. The mapping interface is complete and adheres to the MutableMapping ABC. However, there are a few differences that should be taken into account:

By default, all keys in sections are accessible in a case-insensitive manner [1]. E.g. for option in parser["section"] yields only optionxform’ed option key names. This means lowercased keys by default. At the same time, for a section that holds the key 'a', both expressions return True:

"a" in parser["section"]
"A" in parser["section"]
All sections include DEFAULTSECT values as well which means that .clear() on a section may not leave the section visibly empty. This is because default values cannot be deleted from the section (because technically they are not there). If they are overridden in the section, deleting causes the default value to be visible again. Trying to delete a default value causes a KeyError.

DEFAULTSECT cannot be removed from the parser:

trying to delete it raises ValueError,

parser.clear() leaves it intact,

parser.popitem() never returns it.

parser.get(section, option, **kwargs) - the second argument is not a fallback value. Note however that the section-level get() methods are compatible both with the mapping protocol and the classic configparser API.

parser.items() is compatible with the mapping protocol (returns a list of section_name, section_proxy pairs including the DEFAULTSECT). However, this method can also be invoked with arguments: parser.items(section, raw, vars). The latter call returns a list of option, value pairs for a specified section, with all interpolations expanded (unless raw=True is provided).

The mapping protocol is implemented on top of the existing legacy API so that subclasses overriding the original interface still should have mappings working as expected.

Customizing Parser Behaviour
There are nearly as many INI format variants as there are applications using it. configparser goes a long way to provide support for the largest sensible set of INI styles available. The default functionality is mainly dictated by historical background and it’s very likely that you will want to customize some of the features.

The most common way to change the way a specific config parser works is to use the __init__() options:

defaults, default value: None

This option accepts a dictionary of key-value pairs which will be initially put in the DEFAULT section. This makes for an elegant way to support concise configuration files that don’t specify values which are the same as the documented default.

Hint: if you want to specify default values for a specific section, use read_dict() before you read the actual file.

dict_type, default value: dict

This option has a major impact on how the mapping protocol will behave and how the written configuration files look. With the standard dictionary, every section is stored in the order they were added to the parser. Same goes for options within sections.

An alternative dictionary type can be used for example to sort sections and options on write-back.

Please note: there are ways to add a set of key-value pairs in a single operation. When you use a regular dictionary in those operations, the order of the keys will be ordered. For example:

>>>
parser = configparser.ConfigParser()
parser.read_dict({'section1': {'key1': 'value1',
                               'key2': 'value2',
                               'key3': 'value3'},
                  'section2': {'keyA': 'valueA',
                               'keyB': 'valueB',
                               'keyC': 'valueC'},
                  'section3': {'foo': 'x',
                               'bar': 'y',
                               'baz': 'z'}
})
parser.sections()
['section1', 'section2', 'section3']
[option for option in parser['section3']]
['foo', 'bar', 'baz']
allow_no_value, default value: False

Some configuration files are known to include settings without values, but which otherwise conform to the syntax supported by configparser. The allow_no_value parameter to the constructor can be used to indicate that such values should be accepted:

>>>
import configparser

sample_config = """
[mysqld]
  user = mysql
  pid-file = /var/run/mysqld/mysqld.pid
  skip-external-locking
  old_passwords = 1
  skip-bdb
  # we don't need ACID today
  skip-innodb
"""
config = configparser.ConfigParser(allow_no_value=True)
config.read_string(sample_config)

# Settings with values are treated as before:
config["mysqld"]["user"]
'mysql'

# Settings without values provide None:
config["mysqld"]["skip-bdb"]

# Settings which aren't specified still raise an error:
config["mysqld"]["does-not-exist"]
Traceback (most recent call last):
  ...
KeyError: 'does-not-exist'
delimiters, default value: ('=', ':')

Delimiters are substrings that delimit keys from values within a section. The first occurrence of a delimiting substring on a line is considered a delimiter. This means values (but not keys) can contain the delimiters.

See also the space_around_delimiters argument to ConfigParser.write().

comment_prefixes, default value: ('#', ';')

inline_comment_prefixes, default value: None

Comment prefixes are strings that indicate the start of a valid comment within a config file. comment_prefixes are used only on otherwise empty lines (optionally indented) whereas inline_comment_prefixes can be used after every valid value (e.g. section names, options and empty lines as well). By default inline comments are disabled and '#' and ';' are used as prefixes for whole line comments.

Changed in version 3.2: In previous versions of configparser behaviour matched comment_prefixes=('#',';') and inline_comment_prefixes=(';',).

Please note that config parsers don’t support escaping of comment prefixes so using inline_comment_prefixes may prevent users from specifying option values with characters used as comment prefixes. When in doubt, avoid setting inline_comment_prefixes. In any circumstances, the only way of storing comment prefix characters at the beginning of a line in multiline values is to interpolate the prefix, for example:

>>>
from configparser import ConfigParser, ExtendedInterpolation
parser = ConfigParser(interpolation=ExtendedInterpolation())
# the default BasicInterpolation could be used as well
parser.read_string("""
[DEFAULT]
hash = #

[hashes]
shebang =
  ${hash}!/usr/bin/env python
  ${hash} -*- coding: utf-8 -*-

extensions =
  enabled_extension
  another_extension
  #disabled_by_comment
  yet_another_extension

interpolation not necessary = if # is not at line start
even in multiline values = line #1
  line #2
  line #3
""")
print(parser['hashes']['shebang'])

#!/usr/bin/env python
# -*- coding: utf-8 -*-
print(parser['hashes']['extensions'])

enabled_extension
another_extension
yet_another_extension
print(parser['hashes']['interpolation not necessary'])
if # is not at line start
print(parser['hashes']['even in multiline values'])
line #1
line #2
line #3
strict, default value: True

When set to True, the parser will not allow for any section or option duplicates while reading from a single source (using read_file(), read_string() or read_dict()). It is recommended to use strict parsers in new applications.

Changed in version 3.2: In previous versions of configparser behaviour matched strict=False.

empty_lines_in_values, default value: True

In config parsers, values can span multiple lines as long as they are indent
